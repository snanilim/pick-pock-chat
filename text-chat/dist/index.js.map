{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","createServer","use","exposedHeaders","json","limit","wss","clients","on","connection","userId","length","newClient","ws","push","console","log","message","filter","client","get","req","res","version","next","people","setInterval","forEach","msg","send","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAIA,IAAMA,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAGAA,IAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAH,IAAIG,GAAJ,CAAQ,oBAAK;AACTC,iBAAgB;AADP,CAAL,CAAR;;AAIAJ,IAAIG,GAAJ,CAAQ,qBAAWE,IAAX,CAAgB;AACpBC,QAAO;AADa,CAAhB,CAAR;;AASAN,IAAIO,GAAJ,GAAU,gBAAW;AACpBN,SAAQD,IAAIC;AADQ,CAAX,CAAV;;AAMA,IAAIO,UAAU,EAAd;;AAGAR,IAAIO,GAAJ,CAAQE,EAAR,CAAW,YAAX,EAAyB,UAACC,UAAD,EAAgB;;AAKxC,KAAMC,SAASH,QAAQI,MAAR,GAAiB,CAAhC;;AAIAF,YAAWC,MAAX,GAAoBA,MAApB;;AAGA,KAAME,YAAY;AACjBC,MAAIJ,UADa;AAEjBC,UAAQA;AAFS,EAAlB;;AAMAH,SAAQO,IAAR,CAAaF,SAAb;;AAEAG,SAAQC,GAAR,CAAY,mCAAZ,EAAiDN,MAAjD;;AAGAD,YAAWD,EAAX,CAAc,SAAd,EAAyB,UAACS,OAAD,EAAa;;AAGrCF,UAAQC,GAAR,CAAY,eAAZ,EAA6BC,OAA7B;AAGA,EAND;;AAUAR,YAAWD,EAAX,CAAc,OAAd,EAAuB,YAAM;;AAE5BO,UAAQC,GAAR,CAAY,iBAAZ,EAA+BN,MAA/B,EAAuC,kBAAvC;;AAGAH,YAAUA,QAAQW,MAAR,CAAe,UAACC,MAAD;AAAA,UAAYA,OAAOT,MAAP,KAAkBA,MAA9B;AAAA,GAAf,CAAV;AAEA,EAPD;AASA,CA1CD;;AA6CAX,IAAIqB,GAAJ,CAAQ,GAAR,EAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEzBA,KAAIlB,IAAJ,CAAS;AACRmB;AADQ,EAAT;AAIA,CAND;;AAQAxB,IAAIqB,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;;AAGnD,QAAOF,IAAIlB,IAAJ,CAAS;;AAEfqB,UAAQlB;AAFO,EAAT,CAAP;AAKA,CARD;;AAYAmB,YAAY,YAAM;;AAGjB;;AAEAX,SAAQC,GAAR,YAAqBT,QAAQI,MAA7B;;AAGA,KAAGJ,QAAQI,MAAR,GAAkB,CAArB,EAAuB;;AAEtBJ,UAAQoB,OAAR,CAAgB,UAACR,MAAD,EAAY;;AAE3B;;AAEA,OAAMS,mBAAiBT,OAAOT,MAAxB,wCAAN;;AAEAS,UAAON,EAAP,CAAUgB,IAAV,CAAeD,GAAf;AAEA,GARD;AASA;AAGD,CAtBD,EAsBG,IAtBH;;AAwBA7B,IAAIC,MAAJ,CAAW8B,MAAX,CAAkBC,QAAQC,GAAR,CAAYlC,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC1CiB,SAAQC,GAAR,6BAAsCjB,IAAIC,MAAJ,CAAWiC,OAAX,GAAqBC,IAA3D;AACP,CAFD;;kBAIenC,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport {version} from '../package.json'\nimport WebSocketServer, {Server} from 'uws';\n\n\n\nconst PORT = 3000;\nconst app = express();\napp.server = http.createServer(app);\n\n\napp.use(morgan('dev'));\n\n\napp.use(cors({\n    exposedHeaders: \"*\"\n}));\n\napp.use(bodyParser.json({\n    limit: '50mb'\n}));\n\n\n\n\n\n\napp.wss = new Server({\n\tserver: app.server\n});\n\n\n\nlet clients = [];\n\n\napp.wss.on('connection', (connection) => {\n\n\n\t\n\n\tconst userId = clients.length + 1;\n\n\t\n\n\tconnection.userId = userId;\n\n\n\tconst newClient = {\n\t\tws: connection,\n\t\tuserId: userId,\n\t};\n\n\n\tclients.push(newClient);\n\n\tconsole.log(\"New client connected with userId:\", userId);\n\n\n\tconnection.on('message', (message) => {\n\n\n\t\tconsole.log(\"message from:\", message);\n\n\n\t});\n\n\n\n\tconnection.on('close', () => {\n\n\t\tconsole.log(\"client with ID \", userId, ' is disconnected');\n\n\n\t\tclients = clients.filter((client) => client.userId !== userId);\n\n\t});\n\n});\n\n\napp.get('/',(req, res) => {\n\n\tres.json({\n\t\tversion:  version\n\t});\n\n});\n\napp.get('/api/all_connections', (req, res, next) => {\n\n\n\treturn res.json({\n\n\t\tpeople: clients,\n\t});\n\n});\n\n\n\nsetInterval(() => {\n\n\n\t// each 3 seconds this function will be executed.\n\n\tconsole.log(`There ${clients.length} people in the connection.`);\n\n\n\tif(clients.length  > 0){\n\n\t\tclients.forEach((client) => {\n\n\t\t\t//console.log(\"CLient ID\", client.userId);\n\n\t\t\tconst msg = `Hey ID: ${client.userId}: you got a new message from server`;\n\n\t\t\tclient.ws.send(msg);\n\n\t\t});\n\t}\n\n\n}, 3000)\n\napp.server.listen(process.env.PORT || PORT, () => {\n        console.log(`App is running on port ${app.server.address().port}`);\n});\n\nexport default app;"]}